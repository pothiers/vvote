* Overview
Project to count votes in a mock-election.

* Rules/assumptions
Everything is derived from LVR.
1. "Issue" (each issue voted on)
2. Max number of votes for each issue.
   (1 + number of None columnns after IssueTitle)



* As implemented <2016-12-28 Wed>
Each program supports a ~--help~ option which should be used to get
usage summary.  More details are given in this section

** countvote

Arguments:
+ infile :: Excel (.xslx) file containing ballots
+ outfile :: Vote counts (see --format option)

OPTIONS
+ --format :: used to select output format.  Currently allowed: 
  - text :: Human readable, pure text
  - SOVC :: Statement Of Votes Cast format like official election
       results. Excel file type.
+ --sovc :: Compare results to official election results. Value is
     name of SOVC Excel (.xslx) file.  If not given, comparision will
     not be done.
+ --verbose :: Output progress as ballots processed.

** genmap  
Generate string mapping SOVC to CVR (Races and Choices)

: genmap --help
: usage: genmap [-h] [--version] [-v]
:               [--loglevel {CRTICAL,ERROR,WARNING,INFO,DEBUG}]
:               sovcfile cvrfile racemap choicemap
: 
: Create string mapping (SOVC to CVR)
: 
: positional arguments:
:   sovcfile              SOVC Excel (xslx) file
:   cvrfile               CVR Excel (xslx) file
:   racemap               Tab delimited LUT (SOVC -> CVR)
:   choicemap             Tab delimited LUT (SOVC -> CVR)
: 
: optional arguments:
:   -h, --help            show this help message and exit
:   --version             show program's version number and exit
:   -v, --verbose         Output progress
:   --loglevel {CRTICAL,ERROR,WARNING,INFO,DEBUG}
:                         Kind of diagnostic output
: 

Example:
: genmap tests/data/G2016_EXPORT1.xlsx tests/data/day-1-cvr.xlsx race.csv choice.csv

* TODO Release Work-Flow Overview 
# Can we use Jenkins (automation server, builds); Continuous Integration 

We use the [[https://help.github.com/articles/what-is-a-good-git-workflow/][GitHub flow]] for release management and deployment.

1. Create a new descriptive branch
2. Create, edit, rename, move, or delete files.
3. Commit to that branch locally and regularly push to remote server
4. (when more than one developer) open a pull request when ready for merging
5. After review and sign-off on feature, merge to master
7. After merged and pushed to master, deploy immediately


* Regression test
: tests/smoke/smoke.all.sh
